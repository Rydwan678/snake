{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nexport default function useGameLogic() {\n  _s();\n\n  const gameDataRef = useRef({\n    snakePosition: [[192, 0], [128, 0], [64, 0], [0, 0]],\n    direction: \"right\",\n    speed: 1000,\n    applePosition: [],\n    bricksPosition: [],\n    score: 0,\n    level: 1,\n    isRunning: false,\n    popup: {\n      isShown: false,\n      type: \"\"\n    },\n    isCounting: true\n  });\n  const eatSound = new Audio(\"sounds/eatsound.mp3\");\n  useEffect(() => {\n    setApple();\n    setBricks();\n  }, []);\n\n  function handleKeyDown(e) {\n    const direction = gameDataRef.current.direction;\n\n    if (e.key === \"w\") {\n      if (direction !== \"down\") {\n        gameDataRef.current.direction = \"up\";\n      }\n    } else if (e.key === \"s\") {\n      if (direction !== \"up\") {\n        gameDataRef.current.direction = \"down\";\n      }\n    } else if (e.key === \"a\") {\n      if (direction !== \"right\") {\n        gameDataRef.current.direction = \"left\";\n      }\n    } else if (e.key === \"d\") {\n      if (direction !== \"left\") {\n        gameDataRef.current.direction = \"right\";\n      }\n    }\n\n    if (e.key === \"Escape\") {\n      gameDataRef.current.isRunning = !gameDataRef.current.isRunning;\n      gameDataRef.current.popup = {\n        isShown: !gameDataRef.current.popup.isShown,\n        type: \"gamePaused\"\n      };\n    }\n  }\n\n  const moveSnake = () => {\n    const snakePosition = gameDataRef.current.snakePosition;\n    const direction = gameDataRef.current.direction; // delete last part of snake and add new with updated position\n\n    let previousElementX = snakePosition[0][0];\n    let previousElementY = snakePosition[0][1];\n    let lastSnakeElement = snakePosition[snakePosition.length - 1];\n    let updatedSnakePosition = [...snakePosition];\n\n    if (direction === \"right\") {\n      updatedSnakePosition.pop();\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\n      updatedSnakePosition[0][0] += 64;\n    } else if (direction === \"left\") {\n      updatedSnakePosition.pop();\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\n      updatedSnakePosition[0][0] -= 64;\n    } else if (direction === \"up\") {\n      updatedSnakePosition.pop();\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\n      updatedSnakePosition[0][1] -= 64;\n    } else if (direction === \"down\") {\n      updatedSnakePosition.pop();\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\n      updatedSnakePosition[0][1] += 64;\n    }\n\n    if (checkCollision(updatedSnakePosition) === false) {\n      gameDataRef.current.snakePosition = updatedSnakePosition;\n    } else if (checkCollision(updatedSnakePosition) === true) {\n      gameDataRef.current.isRunning = false;\n      gameDataRef.current.popup = {\n        isShown: !gameDataRef.current.popup.isShown,\n        type: \"lose\"\n      };\n    }\n\n    checkScore(lastSnakeElement);\n  };\n\n  const checkScore = lastSnakeElement => {\n    const snakePosition = gameDataRef.current.snakePosition;\n    const applePosition = gameDataRef.current.applePosition;\n    const score = gameDataRef.current.score;\n\n    if (snakePosition[0][0] === applePosition[0] && snakePosition[0][1] === applePosition[1]) {\n      eatSound.play();\n\n      if (score + 1 !== 10 && gameDataRef.current.level !== 10) {\n        console.log(\"punkt\");\n        gameDataRef.current.score = score + 1;\n        gameDataRef.current.snakePosition.push(lastSnakeElement);\n        setApple();\n      } else if (score + 1 === 10) {\n        if (gameDataRef.current.level < 9) {\n          gameDataRef.current.isRunning = false;\n          gameDataRef.current.popup = {\n            isShown: !gameDataRef.current.popup.isShown,\n            type: \"nextLevel\"\n          };\n        } else if (gameDataRef.current.level === 9) {\n          gameDataRef.current.level = 10;\n          gameDataRef.current.score = 0;\n          gameDataRef.current.isRunning = false;\n          gameDataRef.current.popup = {\n            isShown: !gameDataRef.current.popup.isShown,\n            type: \"win\"\n          };\n        }\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const checkCollision = data => {\n    const snakePosition = data;\n    const bricksPosition = gameDataRef.current.bricksPosition;\n    let snakeHeadPositionX = snakePosition[0][0];\n    let snakeHeadPositionY = snakePosition[0][1]; // check if snake collided with brick\n\n    for (let i = 0; i < bricksPosition.length; i++) {\n      let brickPositionX = bricksPosition[i][0];\n      let brickPositionY = bricksPosition[i][1];\n\n      if (snakeHeadPositionX === brickPositionX && snakeHeadPositionY === brickPositionY) {\n        return true;\n      }\n    } // check if snake collided with himself\n\n\n    for (let i = 1; i < snakePosition.length; i++) {\n      let snakePartPositionX = snakePosition[i][0];\n      let snakePartPositionY = snakePosition[i][1];\n\n      if (snakePartPositionX === snakeHeadPositionX && snakePartPositionY === snakeHeadPositionY) {\n        return true;\n      }\n    } // check if snake collided with game border\n\n\n    if (snakeHeadPositionX < 0 || snakeHeadPositionX > 960 || snakeHeadPositionY < 0 || snakeHeadPositionY > 960) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const getRandomPosition = () => {\n    let randomNumber;\n\n    do {\n      randomNumber = Math.floor(Math.random() * 960);\n    } while (randomNumber % 64 !== 0);\n\n    return randomNumber;\n  };\n\n  const setApple = () => {\n    const snakePosition = gameDataRef.current.snakePosition;\n    const bricksPosition = gameDataRef.current.bricksPosition;\n    let positionX = getRandomPosition();\n    let positionY = getRandomPosition();\n    const apple = [positionX, positionY];\n    gameDataRef.current.applePosition = apple; // if apple has been spawned in player, create new position\n\n    for (let i = 0; i < snakePosition.length; i++) {\n      if (snakePosition[i][0] === apple[0] && snakePosition[i][1] === apple[1]) {\n        setApple();\n      }\n    } // if apple has been spawned in brick, create new position\n\n\n    for (let i = 0; i < bricksPosition.length; i++) {\n      if (bricksPosition[i][0] === apple[0] && bricksPosition[i][1] === apple[1]) {\n        setApple();\n      }\n    } // if apple has been spawned in blind alley, create new position\n\n\n    const appleAdjacentFields = [[apple[0], apple[1] - 64], [apple[0], apple[1] + 64], [apple[0] - 64, apple[1]], [apple[0] + 64, apple[1]]];\n    let counter = 0;\n\n    for (let i = 0; i < bricksPosition.length; i++) {\n      for (let x = 0; x < appleAdjacentFields.length; x++) {\n        if (bricksPosition[i][0] === appleAdjacentFields[x][0] && bricksPosition[i][1] === appleAdjacentFields[x][1]) {\n          counter += 1;\n        }\n      }\n\n      if (counter === 3) {\n        setApple();\n      }\n    }\n  };\n\n  const setBricks = () => {\n    const bricksPosition = gameDataRef.current.bricksPosition;\n\n    for (let i = 0; i < 5; i++) {\n      let positionX = getRandomPosition();\n      let positionY = getRandomPosition();\n      bricksPosition.push([positionX, positionY]); // remove brick when it has been spawned too close to snake start\n\n      let lastBrick = bricksPosition[bricksPosition.length - 1];\n\n      if (lastBrick[0] < 512 && lastBrick[1] == 0) {\n        bricksPosition.pop();\n      }\n    }\n  };\n\n  const setNewLevel = () => {\n    gameDataRef.current.level += 1;\n    gameDataRef.current.score = 0;\n\n    if (gameDataRef.current.level !== 10) {\n      gameDataRef.current.snakePosition = [[192, 0], [128, 0], [64, 0], [0, 0]];\n      gameDataRef.current.direction = \"right\";\n      gameDataRef.current.speed -= 12;\n      gameDataRef.current.popup = {\n        isShown: false,\n        type: \"\"\n      };\n      setBricks();\n      setApple();\n      gameDataRef.current.isCounting = true;\n    }\n  };\n\n  function startGame() {\n    gameDataRef.current = {\n      snakePosition: [[192, 0], [128, 0], [64, 0], [0, 0]],\n      direction: \"right\",\n      speed: 250,\n      applePosition: [],\n      bricksPosition: [],\n      score: 0,\n      level: 1,\n      isRunning: false,\n      popup: {\n        isShown: false,\n        type: \"\"\n      },\n      isCounting: true\n    };\n    setBricks();\n    setApple();\n  }\n\n  function setRunning() {\n    gameDataRef.current.isRunning = true;\n  }\n\n  function disableCounting() {\n    gameDataRef.current.isCounting = false;\n  }\n\n  function update() {\n    if (gameDataRef.current.isRunning) {\n      moveSnake();\n    }\n  }\n\n  return {\n    gameDataRef,\n    handleKeyDown,\n    update,\n    startGame,\n    setNewLevel,\n    setRunning,\n    disableCounting\n  };\n}\n\n_s(useGameLogic, \"PEwDybEuftxibM7VdZPuccHl0Sw=\");","map":{"version":3,"names":["useEffect","useRef","useGameLogic","gameDataRef","snakePosition","direction","speed","applePosition","bricksPosition","score","level","isRunning","popup","isShown","type","isCounting","eatSound","Audio","setApple","setBricks","handleKeyDown","e","current","key","moveSnake","previousElementX","previousElementY","lastSnakeElement","length","updatedSnakePosition","pop","unshift","checkCollision","checkScore","play","console","log","push","data","snakeHeadPositionX","snakeHeadPositionY","i","brickPositionX","brickPositionY","snakePartPositionX","snakePartPositionY","getRandomPosition","randomNumber","Math","floor","random","positionX","positionY","apple","appleAdjacentFields","counter","x","lastBrick","setNewLevel","startGame","setRunning","disableCounting","update"],"sources":["C:/Users/rydwan/Documents/GitHub/snake/src/components/GameSite/useGameLogic.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport CountingDown from \"./CountingDown\";\r\n\r\nexport default function useGameLogic() {\r\n  interface GameDataTypes {\r\n    snakePosition: number[][];\r\n    direction: string;\r\n    speed: number;\r\n    applePosition: number[];\r\n    bricksPosition: number[][];\r\n    score: number;\r\n    level: number;\r\n    isRunning: boolean;\r\n    popup: {\r\n      isShown: boolean;\r\n      type: string;\r\n    };\r\n    isCounting: boolean;\r\n  }\r\n\r\n  const gameDataRef = useRef<GameDataTypes>({\r\n    snakePosition: [\r\n      [192, 0],\r\n      [128, 0],\r\n      [64, 0],\r\n      [0, 0],\r\n    ],\r\n    direction: \"right\",\r\n    speed: 1000,\r\n    applePosition: [],\r\n    bricksPosition: [],\r\n    score: 0,\r\n    level: 1,\r\n    isRunning: false,\r\n    popup: {\r\n      isShown: false,\r\n      type: \"\",\r\n    },\r\n    isCounting: true,\r\n  });\r\n\r\n  const eatSound = new Audio(\"sounds/eatsound.mp3\");\r\n\r\n  useEffect(() => {\r\n    setApple();\r\n    setBricks();\r\n  }, []);\r\n\r\n  function handleKeyDown(e: React.KeyboardEvent) {\r\n    const direction = gameDataRef.current.direction;\r\n    if (e.key === \"w\") {\r\n      if (direction !== \"down\") {\r\n        gameDataRef.current.direction = \"up\";\r\n      }\r\n    } else if (e.key === \"s\") {\r\n      if (direction !== \"up\") {\r\n        gameDataRef.current.direction = \"down\";\r\n      }\r\n    } else if (e.key === \"a\") {\r\n      if (direction !== \"right\") {\r\n        gameDataRef.current.direction = \"left\";\r\n      }\r\n    } else if (e.key === \"d\") {\r\n      if (direction !== \"left\") {\r\n        gameDataRef.current.direction = \"right\";\r\n      }\r\n    }\r\n\r\n    if (e.key === \"Escape\") {\r\n      gameDataRef.current.isRunning = !gameDataRef.current.isRunning;\r\n      gameDataRef.current.popup = {\r\n        isShown: !gameDataRef.current.popup.isShown,\r\n        type: \"gamePaused\",\r\n      };\r\n    }\r\n  }\r\n\r\n  const moveSnake = () => {\r\n    const snakePosition = gameDataRef.current.snakePosition;\r\n    const direction = gameDataRef.current.direction;\r\n    // delete last part of snake and add new with updated position\r\n    let previousElementX = snakePosition[0][0];\r\n    let previousElementY = snakePosition[0][1];\r\n    let lastSnakeElement = snakePosition[snakePosition.length - 1];\r\n    let updatedSnakePosition = [...snakePosition];\r\n\r\n    if (direction === \"right\") {\r\n      updatedSnakePosition.pop();\r\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\r\n      updatedSnakePosition[0][0] += 64;\r\n    } else if (direction === \"left\") {\r\n      updatedSnakePosition.pop();\r\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\r\n      updatedSnakePosition[0][0] -= 64;\r\n    } else if (direction === \"up\") {\r\n      updatedSnakePosition.pop();\r\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\r\n      updatedSnakePosition[0][1] -= 64;\r\n    } else if (direction === \"down\") {\r\n      updatedSnakePosition.pop();\r\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\r\n      updatedSnakePosition[0][1] += 64;\r\n    }\r\n\r\n    if (checkCollision(updatedSnakePosition) === false) {\r\n      gameDataRef.current.snakePosition = updatedSnakePosition;\r\n    } else if (checkCollision(updatedSnakePosition) === true) {\r\n      gameDataRef.current.isRunning = false;\r\n      gameDataRef.current.popup = {\r\n        isShown: !gameDataRef.current.popup.isShown,\r\n        type: \"lose\",\r\n      };\r\n    }\r\n    checkScore(lastSnakeElement);\r\n  };\r\n\r\n  const checkScore = (lastSnakeElement: number[]) => {\r\n    const snakePosition = gameDataRef.current.snakePosition;\r\n    const applePosition = gameDataRef.current.applePosition;\r\n    const score = gameDataRef.current.score;\r\n    if (\r\n      snakePosition[0][0] === applePosition[0] &&\r\n      snakePosition[0][1] === applePosition[1]\r\n    ) {\r\n      eatSound.play();\r\n      if (score + 1 !== 10 && gameDataRef.current.level !== 10) {\r\n        console.log(\"punkt\");\r\n        gameDataRef.current.score = score + 1;\r\n\r\n        gameDataRef.current.snakePosition.push(lastSnakeElement);\r\n        setApple();\r\n      } else if (score + 1 === 10) {\r\n        if (gameDataRef.current.level < 9) {\r\n          gameDataRef.current.isRunning = false;\r\n          gameDataRef.current.popup = {\r\n            isShown: !gameDataRef.current.popup.isShown,\r\n            type: \"nextLevel\",\r\n          };\r\n        } else if (gameDataRef.current.level === 9) {\r\n          gameDataRef.current.level = 10;\r\n          gameDataRef.current.score = 0;\r\n          gameDataRef.current.isRunning = false;\r\n          gameDataRef.current.popup = {\r\n            isShown: !gameDataRef.current.popup.isShown,\r\n            type: \"win\",\r\n          };\r\n        }\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const checkCollision = (data: number[][]) => {\r\n    const snakePosition = data;\r\n    const bricksPosition = gameDataRef.current.bricksPosition;\r\n    let snakeHeadPositionX = snakePosition[0][0];\r\n    let snakeHeadPositionY = snakePosition[0][1];\r\n    // check if snake collided with brick\r\n    for (let i = 0; i < bricksPosition.length; i++) {\r\n      let brickPositionX = bricksPosition[i][0];\r\n      let brickPositionY = bricksPosition[i][1];\r\n\r\n      if (\r\n        snakeHeadPositionX === brickPositionX &&\r\n        snakeHeadPositionY === brickPositionY\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    // check if snake collided with himself\r\n    for (let i = 1; i < snakePosition.length; i++) {\r\n      let snakePartPositionX = snakePosition[i][0];\r\n      let snakePartPositionY = snakePosition[i][1];\r\n      if (\r\n        snakePartPositionX === snakeHeadPositionX &&\r\n        snakePartPositionY === snakeHeadPositionY\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    // check if snake collided with game border\r\n    if (\r\n      snakeHeadPositionX < 0 ||\r\n      snakeHeadPositionX > 960 ||\r\n      snakeHeadPositionY < 0 ||\r\n      snakeHeadPositionY > 960\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const getRandomPosition = () => {\r\n    let randomNumber;\r\n    do {\r\n      randomNumber = Math.floor(Math.random() * 960);\r\n    } while (randomNumber % 64 !== 0);\r\n    return randomNumber;\r\n  };\r\n\r\n  const setApple = () => {\r\n    const snakePosition = gameDataRef.current.snakePosition;\r\n    const bricksPosition = gameDataRef.current.bricksPosition;\r\n\r\n    let positionX = getRandomPosition();\r\n    let positionY = getRandomPosition();\r\n\r\n    const apple = [positionX, positionY];\r\n    gameDataRef.current.applePosition = apple;\r\n    // if apple has been spawned in player, create new position\r\n    for (let i = 0; i < snakePosition.length; i++) {\r\n      if (\r\n        snakePosition[i][0] === apple[0] &&\r\n        snakePosition[i][1] === apple[1]\r\n      ) {\r\n        setApple();\r\n      }\r\n    }\r\n    // if apple has been spawned in brick, create new position\r\n    for (let i = 0; i < bricksPosition.length; i++) {\r\n      if (\r\n        bricksPosition[i][0] === apple[0] &&\r\n        bricksPosition[i][1] === apple[1]\r\n      ) {\r\n        setApple();\r\n      }\r\n    }\r\n    // if apple has been spawned in blind alley, create new position\r\n    const appleAdjacentFields = [\r\n      [apple[0], apple[1] - 64],\r\n      [apple[0], apple[1] + 64],\r\n      [apple[0] - 64, apple[1]],\r\n      [apple[0] + 64, apple[1]],\r\n    ];\r\n    let counter = 0;\r\n    for (let i = 0; i < bricksPosition.length; i++) {\r\n      for (let x = 0; x < appleAdjacentFields.length; x++) {\r\n        if (\r\n          bricksPosition[i][0] === appleAdjacentFields[x][0] &&\r\n          bricksPosition[i][1] === appleAdjacentFields[x][1]\r\n        ) {\r\n          counter += 1;\r\n        }\r\n      }\r\n      if (counter === 3) {\r\n        setApple();\r\n      }\r\n    }\r\n  };\r\n\r\n  const setBricks = () => {\r\n    const bricksPosition = gameDataRef.current.bricksPosition;\r\n    for (let i = 0; i < 5; i++) {\r\n      let positionX = getRandomPosition();\r\n      let positionY = getRandomPosition();\r\n      bricksPosition.push([positionX, positionY]);\r\n      // remove brick when it has been spawned too close to snake start\r\n      let lastBrick = bricksPosition[bricksPosition.length - 1];\r\n      if (lastBrick[0] < 512 && lastBrick[1] == 0) {\r\n        bricksPosition.pop();\r\n      }\r\n    }\r\n  };\r\n\r\n  const setNewLevel = () => {\r\n    gameDataRef.current.level += 1;\r\n    gameDataRef.current.score = 0;\r\n    if (gameDataRef.current.level !== 10) {\r\n      gameDataRef.current.snakePosition = [\r\n        [192, 0],\r\n        [128, 0],\r\n        [64, 0],\r\n        [0, 0],\r\n      ];\r\n      gameDataRef.current.direction = \"right\";\r\n      gameDataRef.current.speed -= 12;\r\n      gameDataRef.current.popup = {\r\n        isShown: false,\r\n        type: \"\",\r\n      };\r\n\r\n      setBricks();\r\n      setApple();\r\n      gameDataRef.current.isCounting = true;\r\n    }\r\n  };\r\n\r\n  function startGame() {\r\n    gameDataRef.current = {\r\n      snakePosition: [\r\n        [192, 0],\r\n        [128, 0],\r\n        [64, 0],\r\n        [0, 0],\r\n      ],\r\n      direction: \"right\",\r\n      speed: 250,\r\n      applePosition: [],\r\n      bricksPosition: [],\r\n      score: 0,\r\n      level: 1,\r\n      isRunning: false,\r\n      popup: {\r\n        isShown: false,\r\n        type: \"\",\r\n      },\r\n      isCounting: true,\r\n    };\r\n    setBricks();\r\n    setApple();\r\n  }\r\n\r\n  function setRunning() {\r\n    gameDataRef.current.isRunning = true;\r\n  }\r\n\r\n  function disableCounting() {\r\n    gameDataRef.current.isCounting = false;\r\n  }\r\n\r\n  function update() {\r\n    if (gameDataRef.current.isRunning) {\r\n      moveSnake();\r\n    }\r\n  }\r\n\r\n  return {\r\n    gameDataRef,\r\n    handleKeyDown,\r\n    update,\r\n    startGame,\r\n    setNewLevel,\r\n    setRunning,\r\n    disableCounting,\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}