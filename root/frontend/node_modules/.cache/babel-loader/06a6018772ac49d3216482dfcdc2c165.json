{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport useGameLogic from \"./useGameLogic\";\nexport default function useGame(render) {\n  _s();\n\n  const requestID = useRef(null);\n  const previousTime = useRef(null);\n  const gameLogic = useGameLogic();\n  const [gameData, setGameData] = useState(gameLogic.gameDataRef.current);\n  const newFrameRef = useRef(-1);\n\n  function loop(time) {\n    const deltaTime = time - previousTime.current;\n    const speed = gameData.speed;\n\n    if (time > newFrameRef.current) {\n      newFrameRef.current = time + speed;\n      gameLogic.update();\n    }\n\n    setGameData({ ...gameLogic.gameDataRef.current\n    });\n    previousTime.current = time;\n    requestID.current = requestAnimationFrame(loop);\n  }\n\n  useEffect(() => {\n    render();\n  }, [gameData]);\n  useEffect(() => {\n    console.log(\"renderUseGame\");\n    requestID.current = requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(requestID.current);\n  }, []);\n  return { ...gameLogic,\n    gameData\n  };\n}\n\n_s(useGame, \"KTjWMViP7heydfoQ4AozpmoHbfE=\", false, function () {\n  return [useGameLogic];\n});","map":{"version":3,"names":["useEffect","useState","useRef","useGameLogic","useGame","render","requestID","previousTime","gameLogic","gameData","setGameData","gameDataRef","current","newFrameRef","loop","time","deltaTime","speed","update","requestAnimationFrame","console","log","cancelAnimationFrame"],"sources":["C:/Users/rydwan/Desktop/snakeTS/my-app/src/components/GameSite/useGame.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport useGameLogic from \"./useGameLogic\";\r\n\r\nexport default function useGame(render: () => void) {\r\n  const requestID = useRef<HTMLInputElement>(null);\r\n  const previousTime = useRef<number>(null);\r\n\r\n  const gameLogic = useGameLogic();\r\n\r\n  const [gameData, setGameData] = useState(gameLogic.gameDataRef.current);\r\n\r\n  const newFrameRef = useRef(-1);\r\n\r\n  function loop(time: number) {\r\n    const deltaTime = time - previousTime.current;\r\n    const speed = gameData.speed;\r\n    if (time > newFrameRef.current) {\r\n      newFrameRef.current = time + speed;\r\n      gameLogic.update();\r\n    }\r\n\r\n    setGameData({ ...gameLogic.gameDataRef.current });\r\n    previousTime.current = time;\r\n\r\n    requestID.current = requestAnimationFrame(loop);\r\n  }\r\n\r\n  useEffect(() => {\r\n    render();\r\n  }, [gameData]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"renderUseGame\");\r\n\r\n    requestID.current = requestAnimationFrame(loop);\r\n\r\n    return () => cancelAnimationFrame(requestID.current);\r\n  }, []);\r\n  return { ...gameLogic, gameData };\r\n}\r\n"],"mappings":";;AAAA,SAAgBA,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,eAAe,SAASC,OAAT,CAAiBC,MAAjB,EAAqC;EAAA;;EAClD,MAAMC,SAAS,GAAGJ,MAAM,CAAmB,IAAnB,CAAxB;EACA,MAAMK,YAAY,GAAGL,MAAM,CAAS,IAAT,CAA3B;EAEA,MAAMM,SAAS,GAAGL,YAAY,EAA9B;EAEA,MAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACO,SAAS,CAACG,WAAV,CAAsBC,OAAvB,CAAxC;EAEA,MAAMC,WAAW,GAAGX,MAAM,CAAC,CAAC,CAAF,CAA1B;;EAEA,SAASY,IAAT,CAAcC,IAAd,EAA4B;IAC1B,MAAMC,SAAS,GAAGD,IAAI,GAAGR,YAAY,CAACK,OAAtC;IACA,MAAMK,KAAK,GAAGR,QAAQ,CAACQ,KAAvB;;IACA,IAAIF,IAAI,GAAGF,WAAW,CAACD,OAAvB,EAAgC;MAC9BC,WAAW,CAACD,OAAZ,GAAsBG,IAAI,GAAGE,KAA7B;MACAT,SAAS,CAACU,MAAV;IACD;;IAEDR,WAAW,CAAC,EAAE,GAAGF,SAAS,CAACG,WAAV,CAAsBC;IAA3B,CAAD,CAAX;IACAL,YAAY,CAACK,OAAb,GAAuBG,IAAvB;IAEAT,SAAS,CAACM,OAAV,GAAoBO,qBAAqB,CAACL,IAAD,CAAzC;EACD;;EAEDd,SAAS,CAAC,MAAM;IACdK,MAAM;EACP,CAFQ,EAEN,CAACI,QAAD,CAFM,CAAT;EAIAT,SAAS,CAAC,MAAM;IACdoB,OAAO,CAACC,GAAR,CAAY,eAAZ;IAEAf,SAAS,CAACM,OAAV,GAAoBO,qBAAqB,CAACL,IAAD,CAAzC;IAEA,OAAO,MAAMQ,oBAAoB,CAAChB,SAAS,CAACM,OAAX,CAAjC;EACD,CANQ,EAMN,EANM,CAAT;EAOA,OAAO,EAAE,GAAGJ,SAAL;IAAgBC;EAAhB,CAAP;AACD;;GApCuBL,O;UAIJD,Y"},"metadata":{},"sourceType":"module"}