{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\nimport useGameLogic from \"./useGameLogic\";\nexport default function useGame(render) {\n  _s();\n\n  const gameLogic = useGameLogic();\n  const [gameData, setGameData] = useState(gameLogic.gameDataRef.current);\n  useEffect(() => {\n    if (gameData.isRunning) {\n      const updateInterval = setInterval(() => {\n        console.log(\"update\");\n        gameLogic.update();\n      }, 1000);\n      return () => {\n        clearInterval(updateInterval);\n      };\n    }\n  }, [gameData.isRunning]);\n  useEffect(() => {\n    const renderInterval = setInterval(() => {\n      console.log(\"render\");\n      render();\n    }, 100);\n    return () => clearInterval(renderInterval);\n  }, [gameData.snakePosition]);\n  return { ...gameLogic,\n    gameData\n  };\n}\n\n_s(useGame, \"HsxjgqhB5rg86Ito8al7KPnyzlw=\", false, function () {\n  return [useGameLogic];\n});","map":{"version":3,"names":["useEffect","useState","useGameLogic","useGame","render","gameLogic","gameData","setGameData","gameDataRef","current","isRunning","updateInterval","setInterval","console","log","update","clearInterval","renderInterval","snakePosition"],"sources":["C:/Users/rydwan/Documents/GitHub/snake/src/components/GameSite/useGame.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport useGameLogic from \"./useGameLogic\";\r\n\r\nexport default function useGame(render: () => void) {\r\n  const gameLogic = useGameLogic();\r\n\r\n  const [gameData, setGameData] = useState(gameLogic.gameDataRef.current);\r\n\r\n  useEffect(() => {\r\n    if (gameData.isRunning) {\r\n      const updateInterval = setInterval(() => {\r\n        console.log(\"update\");\r\n        gameLogic.update();\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(updateInterval);\r\n      };\r\n    }\r\n  }, [gameData.isRunning]);\r\n\r\n  useEffect(() => {\r\n    const renderInterval = setInterval(() => {\r\n      console.log(\"render\");\r\n      render();\r\n    }, 100);\r\n    return () => clearInterval(renderInterval);\r\n  }, [gameData.snakePosition]);\r\n\r\n  return { ...gameLogic, gameData };\r\n}\r\n"],"mappings":";;AAAA;;AACA;AACA,SAAgBA,SAAhB,EAA2BC,QAA3B,QAAmD,OAAnD;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,eAAe,SAASC,OAAT,CAAiBC,MAAjB,EAAqC;EAAA;;EAClD,MAAMC,SAAS,GAAGH,YAAY,EAA9B;EAEA,MAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAACI,SAAS,CAACG,WAAV,CAAsBC,OAAvB,CAAxC;EAEAT,SAAS,CAAC,MAAM;IACd,IAAIM,QAAQ,CAACI,SAAb,EAAwB;MACtB,MAAMC,cAAc,GAAGC,WAAW,CAAC,MAAM;QACvCC,OAAO,CAACC,GAAR,CAAY,QAAZ;QACAT,SAAS,CAACU,MAAV;MACD,CAHiC,EAG/B,IAH+B,CAAlC;MAKA,OAAO,MAAM;QACXC,aAAa,CAACL,cAAD,CAAb;MACD,CAFD;IAGD;EACF,CAXQ,EAWN,CAACL,QAAQ,CAACI,SAAV,CAXM,CAAT;EAaAV,SAAS,CAAC,MAAM;IACd,MAAMiB,cAAc,GAAGL,WAAW,CAAC,MAAM;MACvCC,OAAO,CAACC,GAAR,CAAY,QAAZ;MACAV,MAAM;IACP,CAHiC,EAG/B,GAH+B,CAAlC;IAIA,OAAO,MAAMY,aAAa,CAACC,cAAD,CAA1B;EACD,CANQ,EAMN,CAACX,QAAQ,CAACY,aAAV,CANM,CAAT;EAQA,OAAO,EAAE,GAAGb,SAAL;IAAgBC;EAAhB,CAAP;AACD;;GA3BuBH,O;UACJD,Y"},"metadata":{},"sourceType":"module"}