{"ast":null,"code":"import _toConsumableArray from\"C:/Users/rydwan/Desktop/snakeTS/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{useEffect,useRef}from\"react\";export default function useGame(){var gameDataRef=useRef({snakePosition:[[192,0],[128,0],[64,0],[0,0]],direction:\"right\",speed:250,applePosition:[],bricksPosition:[],score:0,level:1,isRunning:false,popup:{isShown:false,type:\"\"},isCounting:true});var eatSound=new Audio(\"sounds/eatsound.mp3\");useEffect(function(){setApple();setBricks();},[]);function handleKeyDown(e){var direction=gameDataRef.current.direction;if(e.key===\"w\"){if(direction!==\"down\"){gameDataRef.current.direction=\"up\";}}else if(e.key===\"s\"){if(direction!==\"up\"){gameDataRef.current.direction=\"down\";}}else if(e.key===\"a\"){if(direction!==\"right\"){gameDataRef.current.direction=\"left\";}}else if(e.key===\"d\"){if(direction!==\"left\"){gameDataRef.current.direction=\"right\";}}if(e.key===\"Escape\"){console.log(\"test\");gameDataRef.current.isRunning=!gameDataRef.current.isRunning;gameDataRef.current.popup={isShown:!gameDataRef.current.popup.isShown,type:\"gamePaused\"};}}var moveSnake=function moveSnake(){var snakePosition=gameDataRef.current.snakePosition;var direction=gameDataRef.current.direction;// delete last part of snake and add new with updated position\nvar previousElementX=snakePosition[0][0];var previousElementY=snakePosition[0][1];var lastSnakeElement=snakePosition[snakePosition.length-1];var updatedSnakePosition=_toConsumableArray(snakePosition);if(direction===\"right\"){updatedSnakePosition.pop();updatedSnakePosition.unshift([previousElementX,previousElementY]);updatedSnakePosition[0][0]+=64;}else if(direction===\"left\"){updatedSnakePosition.pop();updatedSnakePosition.unshift([previousElementX,previousElementY]);updatedSnakePosition[0][0]-=64;}else if(direction===\"up\"){updatedSnakePosition.pop();updatedSnakePosition.unshift([previousElementX,previousElementY]);updatedSnakePosition[0][1]-=64;}else if(direction===\"down\"){updatedSnakePosition.pop();updatedSnakePosition.unshift([previousElementX,previousElementY]);updatedSnakePosition[0][1]+=64;}if(checkCollision(updatedSnakePosition)===false){gameDataRef.current.snakePosition=updatedSnakePosition;}else if(checkCollision(updatedSnakePosition)===true){gameDataRef.current.isRunning=false;gameDataRef.current.popup={isShown:!gameDataRef.current.popup.isShown,type:\"lose\"};}checkScore(lastSnakeElement);};var checkScore=function checkScore(lastSnakeElement){var snakePosition=gameDataRef.current.snakePosition;var applePosition=gameDataRef.current.applePosition;var score=gameDataRef.current.score;if(snakePosition[0][0]===applePosition[0]&&snakePosition[0][1]===applePosition[1]){eatSound.play();if(score+1!==10&&gameDataRef.current.level!==10){console.log(\"punkt\");gameDataRef.current.score=score+1;gameDataRef.current.snakePosition.push(lastSnakeElement);setApple();}else if(score+1===10){if(gameDataRef.current.level<9){gameDataRef.current.isRunning=false;gameDataRef.current.popup={isShown:!gameDataRef.current.popup.isShown,type:\"nextLevel\"};}else if(gameDataRef.current.level===9){gameDataRef.current.level=10;gameDataRef.current.score=0;gameDataRef.current.isRunning=false;gameDataRef.current.popup={isShown:!gameDataRef.current.popup.isShown,type:\"win\"};}}return true;}else{return false;}};var checkCollision=function checkCollision(data){var snakePosition=data;var bricksPosition=gameDataRef.current.bricksPosition;var snakeHeadPositionX=snakePosition[0][0];var snakeHeadPositionY=snakePosition[0][1];// check if snake collided with brick\nfor(var i=0;i<bricksPosition.length;i++){var brickPositionX=bricksPosition[i][0];var brickPositionY=bricksPosition[i][1];if(snakeHeadPositionX==brickPositionX&&snakeHeadPositionY==brickPositionY){return true;}}// check if snake collided with himself\nfor(var _i=1;_i<snakePosition.length;_i++){var snakePartPositionX=snakePosition[_i][0];var snakePartPositionY=snakePosition[_i][1];if(snakePartPositionX===snakeHeadPositionX&&snakePartPositionY===snakeHeadPositionY){return true;}}// check if snake collided with game border\nif(snakeHeadPositionX<0||snakeHeadPositionX>960||snakeHeadPositionY<0||snakeHeadPositionY>960){return true;}else{return false;}};var getRandomPosition=function getRandomPosition(){var randomNumber;do{randomNumber=Math.floor(Math.random()*960);}while(randomNumber%64!==0);return randomNumber;};var setApple=function setApple(){var snakePosition=gameDataRef.current.snakePosition;var bricksPosition=gameDataRef.current.bricksPosition;var positionX=getRandomPosition();var positionY=getRandomPosition();var apple=[positionX,positionY];gameDataRef.current.applePosition=apple;// if apple has been spawned in player, create new position\nfor(var i=0;i<snakePosition;i++){if(snakePosition[i][0]===apple[0]&&snakePosition[i][1]===apple[1]){setApple();}}// if apple has been spawned in brick, create new position\nfor(var _i2=0;_i2<bricksPosition.length;_i2++){if(bricksPosition[_i2][0]===apple[0]&&bricksPosition[_i2][1]===apple[1]){setApple();}}// if apple has been spawned in blind alley, create new position\nvar appleAdjacentFields=[[apple[0],apple[1]-64],[apple[0],apple[1]+64],[apple[0]-64,apple[1]],[apple[0]+64,apple[1]]];var counter=0;for(var _i3=0;_i3<bricksPosition.length;_i3++){for(var x=0;x<appleAdjacentFields.length;x++){if(bricksPosition[_i3][0]===appleAdjacentFields[x][0]&&bricksPosition[_i3][1]===appleAdjacentFields[x][1]){counter+=1;}}if(counter===3){setApple();}}};var setBricks=function setBricks(){var bricksPosition=gameDataRef.current.bricksPosition;for(var i=0;i<5;i++){var positionX=getRandomPosition();var positionY=getRandomPosition();bricksPosition.push([positionX,positionY]);// remove brick when it has been spawned too close to snake start\nvar lastBrick=bricksPosition[bricksPosition.length-1];if(lastBrick[0]<512&&lastBrick[1]==0){bricksPosition.pop();}}};var setNewLevel=function setNewLevel(){gameDataRef.current.level+=1;gameDataRef.current.score=0;if(gameDataRef.current.level!==10){gameDataRef.current.snakePosition=[[192,0],[128,0],[64,0],[0,0]];gameDataRef.current.direction=\"right\";gameDataRef.current.speed-=12;gameDataRef.current.popup={isShown:false,type:\"\"};setBricks();setApple();gameDataRef.current.isCounting=true;}};function startGame(){gameDataRef.current={snakePosition:[[192,0],[128,0],[64,0],[0,0]],direction:\"right\",speed:250,applePosition:[],bricksPosition:[],score:0,level:1,isRunning:false,popup:{isShown:false,type:\"\"}};setBricks();setApple();gameDataRef.current.isCounting=true;}function setRunning(){gameDataRef.current.isRunning=true;}function disableCounting(){gameDataRef.current.isCounting=false;}function update(){if(gameDataRef.current.isRunning){moveSnake();checkScore();}}return{gameDataRef:gameDataRef,handleKeyDown:handleKeyDown,update:update,startGame:startGame,setNewLevel:setNewLevel,setRunning:setRunning,disableCounting:disableCounting};}","map":{"version":3,"names":["useEffect","useRef","useGame","gameDataRef","snakePosition","direction","speed","applePosition","bricksPosition","score","level","isRunning","popup","isShown","type","isCounting","eatSound","Audio","setApple","setBricks","handleKeyDown","e","current","key","console","log","moveSnake","previousElementX","previousElementY","lastSnakeElement","length","updatedSnakePosition","pop","unshift","checkCollision","checkScore","play","push","data","snakeHeadPositionX","snakeHeadPositionY","i","brickPositionX","brickPositionY","snakePartPositionX","snakePartPositionY","getRandomPosition","randomNumber","Math","floor","random","positionX","positionY","apple","appleAdjacentFields","counter","x","lastBrick","setNewLevel","startGame","setRunning","disableCounting","update"],"sources":["C:/Users/rydwan/Desktop/snakeTS/src/components/GameSite/useGameLogic.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport CountingDown from \"./CountingDown\";\r\n\r\nexport default function useGame() {\r\n  const gameDataRef = useRef({\r\n    snakePosition: [\r\n      [192, 0],\r\n      [128, 0],\r\n      [64, 0],\r\n      [0, 0],\r\n    ],\r\n    direction: \"right\",\r\n    speed: 250,\r\n    applePosition: [],\r\n    bricksPosition: [],\r\n    score: 0,\r\n    level: 1,\r\n    isRunning: false,\r\n    popup: {\r\n      isShown: false,\r\n      type: \"\",\r\n    },\r\n    isCounting: true,\r\n  });\r\n\r\n  const eatSound = new Audio(\"sounds/eatsound.mp3\");\r\n\r\n  useEffect(() => {\r\n    setApple();\r\n    setBricks();\r\n  }, []);\r\n\r\n  function handleKeyDown(e) {\r\n    const direction = gameDataRef.current.direction;\r\n    if (e.key === \"w\") {\r\n      if (direction !== \"down\") {\r\n        gameDataRef.current.direction = \"up\";\r\n      }\r\n    } else if (e.key === \"s\") {\r\n      if (direction !== \"up\") {\r\n        gameDataRef.current.direction = \"down\";\r\n      }\r\n    } else if (e.key === \"a\") {\r\n      if (direction !== \"right\") {\r\n        gameDataRef.current.direction = \"left\";\r\n      }\r\n    } else if (e.key === \"d\") {\r\n      if (direction !== \"left\") {\r\n        gameDataRef.current.direction = \"right\";\r\n      }\r\n    }\r\n\r\n    if (e.key === \"Escape\") {\r\n      console.log(\"test\");\r\n      gameDataRef.current.isRunning = !gameDataRef.current.isRunning;\r\n      gameDataRef.current.popup = {\r\n        isShown: !gameDataRef.current.popup.isShown,\r\n        type: \"gamePaused\",\r\n      };\r\n    }\r\n  }\r\n\r\n  const moveSnake = () => {\r\n    const snakePosition = gameDataRef.current.snakePosition;\r\n    const direction = gameDataRef.current.direction;\r\n    // delete last part of snake and add new with updated position\r\n    let previousElementX = snakePosition[0][0];\r\n    let previousElementY = snakePosition[0][1];\r\n    let lastSnakeElement = snakePosition[snakePosition.length - 1];\r\n    let updatedSnakePosition = [...snakePosition];\r\n\r\n    if (direction === \"right\") {\r\n      updatedSnakePosition.pop();\r\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\r\n      updatedSnakePosition[0][0] += 64;\r\n    } else if (direction === \"left\") {\r\n      updatedSnakePosition.pop();\r\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\r\n      updatedSnakePosition[0][0] -= 64;\r\n    } else if (direction === \"up\") {\r\n      updatedSnakePosition.pop();\r\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\r\n      updatedSnakePosition[0][1] -= 64;\r\n    } else if (direction === \"down\") {\r\n      updatedSnakePosition.pop();\r\n      updatedSnakePosition.unshift([previousElementX, previousElementY]);\r\n      updatedSnakePosition[0][1] += 64;\r\n    }\r\n\r\n    if (checkCollision(updatedSnakePosition) === false) {\r\n      gameDataRef.current.snakePosition = updatedSnakePosition;\r\n    } else if (checkCollision(updatedSnakePosition) === true) {\r\n      gameDataRef.current.isRunning = false;\r\n      gameDataRef.current.popup = {\r\n        isShown: !gameDataRef.current.popup.isShown,\r\n        type: \"lose\",\r\n      };\r\n    }\r\n    checkScore(lastSnakeElement);\r\n  };\r\n\r\n  const checkScore = (lastSnakeElement) => {\r\n    const snakePosition = gameDataRef.current.snakePosition;\r\n    const applePosition = gameDataRef.current.applePosition;\r\n    const score = gameDataRef.current.score;\r\n    if (\r\n      snakePosition[0][0] === applePosition[0] &&\r\n      snakePosition[0][1] === applePosition[1]\r\n    ) {\r\n      eatSound.play();\r\n      if (score + 1 !== 10 && gameDataRef.current.level !== 10) {\r\n        console.log(\"punkt\");\r\n        gameDataRef.current.score = score + 1;\r\n\r\n        gameDataRef.current.snakePosition.push(lastSnakeElement);\r\n        setApple();\r\n      } else if (score + 1 === 10) {\r\n        if (gameDataRef.current.level < 9) {\r\n          gameDataRef.current.isRunning = false;\r\n          gameDataRef.current.popup = {\r\n            isShown: !gameDataRef.current.popup.isShown,\r\n            type: \"nextLevel\",\r\n          };\r\n        } else if (gameDataRef.current.level === 9) {\r\n          gameDataRef.current.level = 10;\r\n          gameDataRef.current.score = 0;\r\n          gameDataRef.current.isRunning = false;\r\n          gameDataRef.current.popup = {\r\n            isShown: !gameDataRef.current.popup.isShown,\r\n            type: \"win\",\r\n          };\r\n        }\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const checkCollision = (data) => {\r\n    const snakePosition = data;\r\n    const bricksPosition = gameDataRef.current.bricksPosition;\r\n    let snakeHeadPositionX = snakePosition[0][0];\r\n    let snakeHeadPositionY = snakePosition[0][1];\r\n    // check if snake collided with brick\r\n    for (let i = 0; i < bricksPosition.length; i++) {\r\n      let brickPositionX = bricksPosition[i][0];\r\n      let brickPositionY = bricksPosition[i][1];\r\n\r\n      if (\r\n        snakeHeadPositionX == brickPositionX &&\r\n        snakeHeadPositionY == brickPositionY\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    // check if snake collided with himself\r\n    for (let i = 1; i < snakePosition.length; i++) {\r\n      let snakePartPositionX = snakePosition[i][0];\r\n      let snakePartPositionY = snakePosition[i][1];\r\n      if (\r\n        snakePartPositionX === snakeHeadPositionX &&\r\n        snakePartPositionY === snakeHeadPositionY\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    // check if snake collided with game border\r\n    if (\r\n      snakeHeadPositionX < 0 ||\r\n      snakeHeadPositionX > 960 ||\r\n      snakeHeadPositionY < 0 ||\r\n      snakeHeadPositionY > 960\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const getRandomPosition = () => {\r\n    let randomNumber;\r\n    do {\r\n      randomNumber = Math.floor(Math.random() * 960);\r\n    } while (randomNumber % 64 !== 0);\r\n    return randomNumber;\r\n  };\r\n\r\n  const setApple = () => {\r\n    const snakePosition = gameDataRef.current.snakePosition;\r\n    const bricksPosition = gameDataRef.current.bricksPosition;\r\n\r\n    let positionX = getRandomPosition();\r\n    let positionY = getRandomPosition();\r\n\r\n    const apple = [positionX, positionY];\r\n    gameDataRef.current.applePosition = apple;\r\n    // if apple has been spawned in player, create new position\r\n    for (let i = 0; i < snakePosition; i++) {\r\n      if (\r\n        snakePosition[i][0] === apple[0] &&\r\n        snakePosition[i][1] === apple[1]\r\n      ) {\r\n        setApple();\r\n      }\r\n    }\r\n    // if apple has been spawned in brick, create new position\r\n    for (let i = 0; i < bricksPosition.length; i++) {\r\n      if (\r\n        bricksPosition[i][0] === apple[0] &&\r\n        bricksPosition[i][1] === apple[1]\r\n      ) {\r\n        setApple();\r\n      }\r\n    }\r\n    // if apple has been spawned in blind alley, create new position\r\n    const appleAdjacentFields = [\r\n      [apple[0], apple[1] - 64],\r\n      [apple[0], apple[1] + 64],\r\n      [apple[0] - 64, apple[1]],\r\n      [apple[0] + 64, apple[1]],\r\n    ];\r\n    let counter = 0;\r\n    for (let i = 0; i < bricksPosition.length; i++) {\r\n      for (let x = 0; x < appleAdjacentFields.length; x++) {\r\n        if (\r\n          bricksPosition[i][0] === appleAdjacentFields[x][0] &&\r\n          bricksPosition[i][1] === appleAdjacentFields[x][1]\r\n        ) {\r\n          counter += 1;\r\n        }\r\n      }\r\n      if (counter === 3) {\r\n        setApple();\r\n      }\r\n    }\r\n  };\r\n\r\n  const setBricks = () => {\r\n    const bricksPosition = gameDataRef.current.bricksPosition;\r\n    for (let i = 0; i < 5; i++) {\r\n      let positionX = getRandomPosition();\r\n      let positionY = getRandomPosition();\r\n      bricksPosition.push([positionX, positionY]);\r\n      // remove brick when it has been spawned too close to snake start\r\n      let lastBrick = bricksPosition[bricksPosition.length - 1];\r\n      if (lastBrick[0] < 512 && lastBrick[1] == 0) {\r\n        bricksPosition.pop();\r\n      }\r\n    }\r\n  };\r\n\r\n  const setNewLevel = () => {\r\n    gameDataRef.current.level += 1;\r\n    gameDataRef.current.score = 0;\r\n    if (gameDataRef.current.level !== 10) {\r\n      gameDataRef.current.snakePosition = [\r\n        [192, 0],\r\n        [128, 0],\r\n        [64, 0],\r\n        [0, 0],\r\n      ];\r\n      gameDataRef.current.direction = \"right\";\r\n      gameDataRef.current.speed -= 12;\r\n      gameDataRef.current.popup = {\r\n        isShown: false,\r\n        type: \"\",\r\n      };\r\n\r\n      setBricks();\r\n      setApple();\r\n      gameDataRef.current.isCounting = true;\r\n    }\r\n  };\r\n\r\n  function startGame() {\r\n    gameDataRef.current = {\r\n      snakePosition: [\r\n        [192, 0],\r\n        [128, 0],\r\n        [64, 0],\r\n        [0, 0],\r\n      ],\r\n      direction: \"right\",\r\n      speed: 250,\r\n      applePosition: [],\r\n      bricksPosition: [],\r\n      score: 0,\r\n      level: 1,\r\n      isRunning: false,\r\n      popup: {\r\n        isShown: false,\r\n        type: \"\",\r\n      },\r\n    };\r\n    setBricks();\r\n    setApple();\r\n    gameDataRef.current.isCounting = true;\r\n  }\r\n\r\n  function setRunning() {\r\n    gameDataRef.current.isRunning = true;\r\n  }\r\n\r\n  function disableCounting() {\r\n    gameDataRef.current.isCounting = false;\r\n  }\r\n\r\n  function update() {\r\n    if (gameDataRef.current.isRunning) {\r\n      moveSnake();\r\n      checkScore();\r\n    }\r\n  }\r\n\r\n  return {\r\n    gameDataRef,\r\n    handleKeyDown,\r\n    update,\r\n    startGame,\r\n    setNewLevel,\r\n    setRunning,\r\n    disableCounting,\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}